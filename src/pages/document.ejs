<!DOCTYPE html>
<html lang="zh-cmn-Hans">
<head>
  <meta charset="utf-8">
    <meta name="theme-color" content="#000000">

    <title>亚冠体育</title>
    <!-- set `maximum-scale` for some compatibility issues -->
    <!-- 强制显示方式 -->
    <meta name="viewport" id="viewportMeta" content="width=device-width,viewport-fit=cover,initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no,minimal-ui">
    <!-- 允许全屏 -->
    <meta name="keywords" content="体育，亚冠体育">

    <meta name="apple-mobile-web-app-capable" content="yes" />
    <!-- 顶端状态条样式 -->
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
    <!-- 忽略将数字变为电话号码 -->
    <meta content="telephone=no" name="format-detection">
    <!-- uc强制竖屏 -->
    <meta name="screen-orientation" content="portrait">
    <!-- qq强制竖屏 -->
    <meta name="x5-orientation" content="portrait">
    <!-- uc强制全屏 -->
    <meta name="full-screen" content="yes">
    <!-- qq强制全屏 -->
    <meta name="x5-fullscreen" content="true">
    <!-- uc应用模式 -->
    <meta name="browsermode" content="application">
    <!-- qq应用模式 -->
    <meta name="x5-page-mode" content="app">
    <!-- windows phone 点击无高光 -->
    <meta name="msapplication-tap-highlight" content="no">

    <meta name=”apple-mobile-web-app-status-bar-style” content=”black-translucent” />
  <style>
    @-webkit-keyframes loader13-1 {
      0% {
        -webkit-transform: rotate(270deg);
      }
      50% {
        -webkit-transform: rotate(360deg);
      }
      100% {
        -webkit-transform: rotate(270deg);
      }
    }
    @-webkit-keyframes loader13-2 {
      0% {
        -webkit-transform: rotate(90deg);
      }
      50% {
        -webkit-transform: rotate(0deg);
      }
      100% {
        -webkit-transform: rotate(90deg);
      }
    }
    @-webkit-keyframes loader13-3 {
      0% {
        left: 100px;
      }
      100% {
        left: 20px;
      }
    }
    .loader-13 {
      position: absolute;
      width: 100px;
      height: 100px;
      top: 50%;
      left: 50%;
      transform: translateX(-50%) translateY(-50%);
      z-index: -1;
    }
    .loader-13 div:nth-child(1), .loader-13 div:nth-child(2) {
      width: 0;
      height: 0;
      border: 25px solid #fff;
      border-right: 25px solid transparent;
      border-radius: 50%;
      position: absolute;
    }
    .loader-13 div:nth-child(1) {
      -webkit-animation: loader13-1 0.5s 0s infinite linear;
    }
    .loader-13 div:nth-child(2) {
      -webkit-animation: loader13-2 0.5s 0s infinite linear;
    }
    .loader-13 div:nth-child(3), .loader-13 div:nth-child(4), .loader-13 div:nth-child(5) {
      width: 10px;
      height: 10px;
      border-radius: 50%;
      background: #fff;
      position: absolute;
      left: 100px;
      top: 20px;
      opacity: 0.7;
    }
    .loader-13 div:nth-child(3) {
      -webkit-animation: loader13-3 1s -0.66s linear infinite;
    }
    .loader-13 div:nth-child(4) {
      -webkit-animation: loader13-3 1s -0.33s linear infinite;
    }
    .loader-13 div:nth-child(5) {
      -webkit-animation: loader13-3 1s 0s linear infinite;
    }
  </style>
</head>
<body>
<div class="loader-13" id="loader-13">
  <div></div>
  <div></div>
  <div></div>
  <div></div>
  <div></div>
</div>
<div id="root">
</div></body>
<script>

  var isIphoneX = window.devicePixelRatio && window.devicePixelRatio === 3 && window.screen.width === 375 && testUA('iPhone')
  // 处理lib-flexible放大viewport的情况
  var scale = window.innerWidth / window.screen.width
  if (isIphoneX) {
    check()
    window.onscroll = throttle(check, 200)
  }

  function check () {
    // 100为经验值
    // alert(window.screen.height - window.innerHeight / scale)
    if (window.screen.height - window.innerHeight / scale < 100) {
      document.body.classList.add('fix-iphonex-bottom')
    } else {
      document.body.classList.remove('fix-iphonex-bottom')
    }
  }
  function testUA (str) {
    return navigator.userAgent.indexOf(str) > -1
  }
  function throttle (func, wait) {
    var ctx, args, rtn, timeoutID; // caching
    var last = 0;
    return function throttled () {
      ctx = this;
      args = arguments;
      var delta = new Date() - last;
      if (!timeoutID)
        if (delta >= wait) call();
        else timeoutID = setTimeout(call, wait - delta);
      return rtn;
    };

    function call () {
      timeoutID = 0;
      last = +new Date();
      rtn = func.apply(ctx, args);
      ctx = null;
      args = null;
    }
  }

  const initViewport = function(height){
    var metaEl = document.querySelector("#viewportMeta");
    var content = "height=" + window.innerHeight + ",width=" + window.innerWidth + ",user-scalable=no";
    metaEl.setAttribute('name', 'viewport');
    metaEl.setAttribute('content', content);
  }
  const realHeight = window.innerWidth > window.innerHeight ? window.innerWidth : window.innerHeight
  initViewport(realHeight);

  //拿到Performance并且初始化一些参数
  window.onload = () => {
    document.getElementById('loader-13').style.display = 'none';
    let  { timing } = performance,
      start = timing.navigationStart,
    //根据提供的api和属性，拿到对应的时间
    dnsTime = timing.domainLookupEnd - timing.domainLookupStart;
    tcpTime = timing.connectEnd - timing.connectStart;
    firstPaintTime = timing.responseStart - start;
    domRenderTime = timing.domContentLoadedEventEnd - start;
    loadTime = timing.loadEventStart - start;

    console.log('DNS解析时间:', dnsTime,
      '\nTCP建立时间:', tcpTime,
      '\n首屏时间:', firstPaintTime,
      '\ndom渲染完成时间:', domRenderTime,
      '\n页面onload时间:', loadTime,
    );
  }


</script>
</html>
